---
import NavbarLogo from "./NavbarLogo.astro";
const { t, currentLang } = Astro.props;

const menu = [
  t.nav.menu.highlight,
  t.nav.menu.departments,
  t.nav.menu.insight,
  t.nav.menu.activity,
  t.nav.menu.contests,
  t.nav.menu.map,
  t.nav.menu.faq,
];
---

<nav
  id="site-nav"
  class="fixed inset-x-0 top-0 z-50 border-b border-gray-200 bg-white/80 backdrop-blur transition-transform duration-300 will-change-transform supports-[backdrop-filter]:bg-white/70"
  data-fade
  style="--i: 0;"
>
  <div
    class="relative mx-auto flex h-14 max-w-7xl items-center justify-between px-4 lg:h-16 lg:justify-between"
  >
    <button
      id="back-btn"
      class="absolute flex hidden h-10 w-10 items-center justify-center border-0 text-primary transition-all duration-200 hover:text-primary-hover focus:outline-none lg:hidden"
      aria-label="Go back"
      style="display: none;"
    >
      <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"
        ></path>
      </svg>
    </button>

    <a
      href="/"
      aria-label="Home"
      class="flex-shrink-0 transition-transform duration-1000 ease-in-out lg:flex-shrink-0"
      id="logo-link"
    >
      <NavbarLogo />
    </a>

    <div
      class="hidden lg:absolute lg:left-1/2 lg:flex lg:-translate-x-1/2 lg:transform lg:items-center lg:gap-6"
    >
      {
        menu.map((m) => (
          <a
            href={m.href}
            class="font-prompt text-base font-bold leading-none text-nowrap  text-primary transition-colors duration-200 hover:text-primary-hover"
          >
            {m.title}
          </a>
        ))
      }
    </div>

    <div class="absolute right-4 flex items-center gap-2 lg:relative lg:right-auto lg:gap-4">
      <a
        href={currentLang === "th" ? "/en/" : "/th/"}
        class="flex items-center gap-0.5 text-xs font-normal leading-none transition-colors duration-200"
        style="width: 35.5px; height: 12px; font-family: var(--font-prompt); letter-spacing: 0%;"
        aria-label="Switch language"
      >
        <span class={currentLang === "th" ? "text-primary" : "text-gray-500"}>
          {t.nav.language.th}
        </span>
        <span class="text-gray-300">|</span>
        <span class={currentLang === "en" ? "text-primary" : "text-gray-500"}>
          {t.nav.language.en}
        </span>
      </a>
      <!-- 
      <a
        href={t.nav.register.href}
        class="hidden cursor-pointer items-center justify-center whitespace-nowrap rounded-2xl border-0 bg-gradient-to-r from-primary to-primary-hover px-4 py-2.5 text-center font-bold text-white shadow-lg transition-all duration-200 hover:scale-105 hover:opacity-90 hover:shadow-xl active:scale-95 lg:inline-flex"
      >
        {t.nav.register.title}
      </a> -->

      <button
        id="menu-btn"
        class="border-0 p-2 text-primary transition-all duration-200 hover:text-primary-hover focus:rounded-md focus:bg-gray-100 focus:outline-none lg:hidden"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Toggle menu"
        type="button"
      >
        <svg
          data-icn="hamburger"
          class="h-6 w-6"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg
          data-icn="close"
          class="hidden h-6 w-6"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <div id="mobile-menu" class="max-h-0 overflow-hidden transition-all duration-300 lg:hidden">
    <div class="px-4 pb-4">
      <div class="flex flex-col gap-2">
        {
          menu.map((m) => (
            <a
              href={m.href}
              class="block rounded-lg border-0 px-4 py-2 text-center font-prompt text-base font-bold leading-none text-primary transition-all duration-200 hover:text-primary-hover focus:bg-gray-100 focus:outline-none"
            >
              {m.title}
            </a>
          ))
        }
        <!-- <button>
          <a
            href={t.nav.register.href}
            class="inline-flex items-center justify-center whitespace-nowrap rounded-2xl border-0 bg-gradient-to-r from-primary to-primary-hover px-4 py-2.5 font-bold text-white shadow-lg transition-all duration-200 hover:scale-105 hover:opacity-90 hover:shadow-xl active:scale-95"
          >
            {t.nav.register.title}
          </a>
        </button> -->
      </div>
    </div>
  </div>
</nav>

<div class="h-14 lg:h-16"></div>

<script is:inline>
  (() => {
    const nav = document.getElementById("site-nav");
    const btn = document.getElementById("menu-btn");
    const menu = document.getElementById("mobile-menu");
    const backBtn = document.getElementById("back-btn");
    const openIcon = btn?.querySelector('[data-icn="hamburger"]');
    const closeIcon = btn?.querySelector('[data-icn="close"]');

    const showBackButton = () => {
      const isHomePage =
        window.location.pathname === "/" ||
        window.location.pathname === "/th/" ||
        window.location.pathname === "/en/";
      const isDesktop = window.innerWidth >= 1024;
      const logoLink = document.getElementById("logo-link");

      if (backBtn) {
        if (isDesktop) {
          backBtn.style.display = "none";
        } else {
          if (isHomePage) {
            backBtn.style.display = "none";
          } else {
            backBtn.style.display = "flex";
          }
        }
      }

      if (logoLink && !isDesktop) {
        if (isHomePage) {
          logoLink.style.transform = "translateX(0)";
        } else {
          logoLink.style.transform = "translateX(calc(50vw - 50% - 2rem))";
        }
      }
    };

    backBtn?.addEventListener("click", () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });

      history.back();
    });

    showBackButton();

    let lastY = window.scrollY;
    let isHidden = false;
    let isOpen = false;
    const threshold = 10;
    let ticking = false;

    const handleScroll = () => {
      if (isOpen) return;

      const currentY = window.scrollY;
      const scrollingDown = currentY > lastY + threshold;
      const scrollingUp = currentY < lastY - threshold;

      if (currentY < 20) {
        nav.classList.remove("-translate-y-full");
        isHidden = false;
      } else if (scrollingDown && !isHidden && currentY > 50) {
        nav.classList.add("-translate-y-full");
        isHidden = true;
      } else if (scrollingUp && isHidden) {
        nav.classList.remove("-translate-y-full");
        isHidden = false;
      }

      lastY = currentY;
      ticking = false;
    };

    window.addEventListener(
      "scroll",
      () => {
        if (!ticking) {
          requestAnimationFrame(handleScroll);
          ticking = true;
        }
      },
      { passive: true }
    );
    const setOpen = (open) => {
      isOpen = open;
      btn?.setAttribute("aria-expanded", String(open));
      if (menu) {
        menu.style.maxHeight = open ? menu.scrollHeight + "px" : "0px";
      }
      openIcon?.classList.toggle("hidden", open);
      closeIcon?.classList.toggle("hidden", !open);
    };

    btn?.addEventListener("click", () => setOpen(!isOpen));
    menu?.querySelectorAll("a").forEach((a) => a.addEventListener("click", () => setOpen(false)));

    document.addEventListener("click", (e) => {
      if (isOpen && !nav?.contains(e.target)) {
        setOpen(false);
      }
    });

    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const targetId = this.getAttribute("href");
        const target = document.querySelector(targetId);

        if (target) {
          if (nav && isHidden) {
            nav.classList.remove("-translate-y-full");
            isHidden = false;
          }

          if (isOpen) {
            setOpen(false);
          }

          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        } else {
          const currentLang = window.location.pathname.startsWith("/en/") ? "en" : "th";
          const homeUrl = currentLang === "en" ? "/en/" : "/th/";
          window.location.href = homeUrl + targetId;
        }
      });
    });

    window.matchMedia("(min-width: 1024px)").addEventListener("change", (e) => {
      if (e.matches) setOpen(false);
      showBackButton();
    });
  })();
</script>
