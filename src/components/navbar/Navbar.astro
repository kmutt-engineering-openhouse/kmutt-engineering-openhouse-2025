---
import NavbarLogo from "./NavbarLogo.astro";
const { t, currentLang } = Astro.props;

const menu = [
  t.nav.menu.highlight,
  t.nav.menu.departments,
  t.nav.menu.inside,
  t.nav.menu.competitions,
  t.nav.menu.map,
  t.nav.menu.faq,
];
---

<nav
  id="site-nav"
  class="fixed inset-x-0 top-0 z-50 border-b border-gray-200 bg-white/80 backdrop-blur transition-transform duration-300 will-change-transform supports-[backdrop-filter]:bg-white/60"
>
  <div class="mx-auto flex h-14 max-w-7xl items-center justify-between px-4 lg:h-16 lg:justify-between relative">
    <button
      id="back-btn"
      class="absolute left-4 flex items-center justify-center w-10 h-10 text-purple-600 hover:text-purple-700 focus:outline-none border-0 transition-all duration-200 hidden lg:hidden"
      aria-label="Go back"
      style="display: none;"
    >
      <img src="/src/assets/icons/back-arrow.svg" alt="Back" class="w-3.5 h-6" />
    </button>

    <a href="/" aria-label="Home" class="flex-shrink-0 lg:flex-shrink-0 transition-transform duration-1000 ease-in-out" id="logo-link">
      <NavbarLogo />
    </a>

    <div class="hidden lg:flex lg:absolute lg:left-1/2 lg:transform lg:-translate-x-1/2 lg:items-center lg:gap-6">
      {
        menu.map((m) => (
          <a
            href={m.href}
            class="font-prompt text-base leading-none font-bold text-[var(--color-primary)] hover:text-[var(--color-primary-hover)]"
          >
            {m.title}
          </a>
        ))
      }
    </div>

    <div class="flex items-center gap-2 absolute right-4 lg:relative lg:right-auto">
      <a
        href={currentLang === "th" ? "/en/" : "/th/"}
        class="flex items-center gap-0.5 text-xs leading-none font-normal"
        style="width: 35.5px; height: 12px; font-family: var(--font-display); letter-spacing: 0%;"
        aria-label="Switch language"
      >
        <span class={currentLang === "th" ? "text-[var(--color-primary)]" : "text-gray-500"}>
          {t.nav.language.th}
        </span>
        <span class="text-gray-300">|</span>
        <span class={currentLang === "en" ? "text-[var(--color-primary)]" : "text-gray-500"}>
          {t.nav.language.en}
        </span>
      </a>

      <button
        id="menu-btn"
        class="p-2 text-[var(--color-primary)] hover:text-[var(--color-primary-hover)] focus:bg-gray-300 focus:rounded-md focus:outline-none border-0 lg:hidden"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Toggle menu"
        type="button"
      >
        <svg
          data-icn="hamburger"
          class="h-6 w-6"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg
          data-icn="close"
          class="hidden h-6 w-6"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <div id="mobile-menu" class="max-h-0 overflow-hidden transition-all duration-300 lg:hidden">
    <div class="px-4 pb-4">
      <div class="flex flex-col gap-2">
        {
          menu.map((m) => (
            <a
              href={m.href}
              class="font-prompt block rounded-lg px-4 py-2 text-center text-base leading-none font-bold text-[var(--color-primary)] hover:text-[var(--color-primary-hover)] focus:bg-gray-300 focus:outline-none border-0"
            >
              {m.title}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</nav>

<div class="h-14 lg:h-16"></div>

<script is:inline>
  (() => {
    const nav = document.getElementById("site-nav");
    const btn = document.getElementById("menu-btn");
    const menu = document.getElementById("mobile-menu");
    const backBtn = document.getElementById("back-btn");
    const openIcon = btn?.querySelector('[data-icn="hamburger"]');
    const closeIcon = btn?.querySelector('[data-icn="close"]');

    const showBackButton = () => {
      const isHomePage = window.location.pathname === '/' || 
                        window.location.pathname === '/th/' || 
                        window.location.pathname === '/en/';
      const isDesktop = window.innerWidth >= 1024;
      const logoLink = document.getElementById('logo-link');
      
      if (backBtn) {
        if (isDesktop) {
          backBtn.style.display = 'none';
        } else {
          if (isHomePage) {
            backBtn.style.display = 'none';
          } else {
            backBtn.style.display = 'flex';
          }
        }
      }
      
      if (logoLink && !isDesktop) {
        if (isHomePage) {
          logoLink.style.transform = 'translateX(0)';
        } else {
          logoLink.style.transform = 'translateX(calc(50vw - 50% - 2rem))';
        }
      }
    };

    backBtn?.addEventListener('click', () => {
      const logoLink = document.getElementById('logo-link');
      
      if (logoLink) {
        logoLink.style.transform = 'translateX(0)';
      }
      
      setTimeout(() => {
        if (backBtn) {
          backBtn.style.display = 'none';
        }
        
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
        
        setTimeout(() => {
          isFirstBack = true;
          history.back();
        }, 300);
      }, 500);
    });

    setTimeout(() => {
      showBackButton();
    }, 100);
    
    let lastY = window.scrollY;
    let isHidden = false;
    let isFirstBack = true;
    let isOpen = false;
    const threshold = 10;

    window.addEventListener(
      "scroll",
      () => {
        if (isOpen) return;

        const currentY = window.scrollY;
        const scrollingDown = currentY > lastY + threshold;
        const scrollingUp = currentY < lastY - threshold;

        if (isFirstBack && currentY <= 50) {
          nav.classList.remove("-translate-y-full");
          isHidden = false;
          if (currentY > 100) {
            isFirstBack = false;
          }
          return;
        }

        if (currentY < 20) {
          nav.classList.remove("-translate-y-full");
          isHidden = false;
        }
        else if (scrollingDown && !isHidden && currentY > 50) {
          nav.classList.add("-translate-y-full");
          isHidden = true;
        }
        else if (scrollingUp && isHidden) {
          nav.classList.remove("-translate-y-full");
          isHidden = false;
        }

        lastY = currentY;
      },
      { passive: true }
    );
    const setOpen = (open) => {
      isOpen = open;
      btn?.setAttribute("aria-expanded", String(open));
      if (menu) {
        menu.style.maxHeight = open ? menu.scrollHeight + "px" : "0px";
      }
      openIcon?.classList.toggle("hidden", open);
      closeIcon?.classList.toggle("hidden", !open);
    };

    btn?.addEventListener("click", () => setOpen(!isOpen));
    menu?.querySelectorAll("a").forEach((a) => a.addEventListener("click", () => setOpen(false)));
    
    document.addEventListener("click", (e) => {
      if (isOpen && !nav?.contains(e.target)) {
        setOpen(false);
      }
    });
    
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const target = document.querySelector(targetId);
        
        if (target) {
          const navHeight = nav?.offsetHeight || 0;
          const targetPosition = target.offsetTop - navHeight - 20;
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        } else {
          const currentLang = window.location.pathname.startsWith('/en/') ? 'en' : 'th';
          const homeUrl = currentLang === 'en' ? '/en/' : '/th/';
          window.location.href = homeUrl + targetId;
        }
      });
    });
    
    window.matchMedia("(min-width: 1024px)").addEventListener("change", (e) => {
      if (e.matches) setOpen(false);
      showBackButton();
    });
  })();
</script>
